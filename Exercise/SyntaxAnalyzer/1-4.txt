grammar BKOOL;

@lexer::header {
from lexererr import *
}

options{
	language=Python3;
}

// write for program rule here using vardecl and funcdecl
program: decllist EOF;

//BNF
decllist: decl decllist | decl;
decl: funcdecl | vardecl;


//Â includes a sequence of alphabetic characters.
idlist: ID COMMA idlist | ID;
vardecl: typ idlist SEMI;
funcdecl: typ ID paramdecl body;
//parameters
paramdecl: LB paramlist RB;
paramlist: paramprime | ;
paramprime: param SEMI paramprime | param;
param: typ idlist;
typ: INT | FLOAT;
//exprs
exprlist: exprprime | ;
exprprime: expr COMMA exprprime | expr;
//'+' < '-' << '*,/'


body: LP stmtlist RP;
stmtlist: stmt stmtlist |;
stmt: vardecl | callstmt | assstmt | returnstmt;

//statements
assstmt: ID ASSOP expr SEMI;
callstmt: ID LB exprlist RB SEMI;
returnstmt: RETURN expr SEMI;

//operators and operands
expr: term_1 ADDOP expr | term_1; //right - associative
term_1:  term_2 MINUS term_2 | term_2; //non - associative
term_2: term_2 (MULOP | DIVOP) term_3 | term_3; //left - associative
term_3: subexpr | callexpr | ID | INTLIT | FLOATLIT;
subexpr: LB expr RB;
callexpr: ID LB exprlist RB;



INT: 'int'; 
FLOAT: 'float';
RETURN: 'return';
INTLIT: '0' | [1-9][0-9]*;
FLOATLIT: INTPART '.' FRACPART;
fragment INTPART: '0' | [1-9][0-9]*;
fragment FRACPART: [0-9]+;
ID: [a-zA-Z]+;
SEMI: ';';
COMMA: ',';
LB: '('; 
RB: ')';
LP: '{';
RP: '}';
ASSOP: '=';
ADDOP: '+';
MINUS: '-';
DIVOP: '/';
MULOP: '*';

WS: [ \t\r\n] -> skip;

ERROR_CHAR: . {raise ErrorToken(self.text)};
